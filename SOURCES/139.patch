From 88612b2cf3d5a4ac34b2400360563e1cebdbdca5 Mon Sep 17 00:00:00 2001
From: Juan Jose Nicola <juan.nicola@greenbone.net>
Date: Wed, 30 Oct 2019 11:23:30 +0100
Subject: [PATCH 1/4] Improve error handling when creating vts xml elements.
 Avoid ospd to crash if there is an invalid char.

---
 CHANGELOG.md           |   1 +
 ospd_openvas/daemon.py | 106 ++++++++++++++++++++++++++++++++---------
 2 files changed, 84 insertions(+), 23 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 34a0b3d..14b7bdb 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -8,6 +8,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).
 
 ### Fixed
 - Improve redis clean out when stopping a scan. [#128](https://github.com/greenbone/ospd-openvas/pull/128)
+- Improve error handling when creating vts xml elements. [#139](https://github.com/greenbone/ospd-openvas/pull/139)
 
 [1.0.1]: https://github.com/greenbone/ospd-openvas/commits/v1.0.0...ospd-openvas-1.0
 
diff --git a/ospd_openvas/daemon.py b/ospd_openvas/daemon.py
index dbc137c..1231499 100644
--- a/ospd_openvas/daemon.py
+++ b/ospd_openvas/daemon.py
@@ -507,8 +507,12 @@ def get_custom_vt_as_xml_str(vt_id, custom):
         _custom = Element('custom')
         for key, val in custom.items():
             xml_key = SubElement(_custom, key)
-            xml_key.text = val
-
+            try:
+                xml_key.text = val
+            except ValueError as e:
+                logger.warning(
+                    "Not possible to parse custom tag for vt %s: %s", vt_id, e
+                )
         return tostring(_custom).decode('utf-8')
 
     @staticmethod
@@ -523,7 +527,12 @@ def get_severities_vt_as_xml_str(vt_id, severities):
         _severities = Element('severities')
         _severity = SubElement(_severities, 'severity')
         if 'severity_base_vector' in severities:
-            _severity.text = severities.get('severity_base_vector')
+            try:
+                _severity.text = severities.get('severity_base_vector')
+            except ValueError as e:
+                logger.warning(
+                    "Not possible to parse severity tag for vt %s: %s", vt_id, e
+                )
         if 'severity_origin' in severities:
             _severity.set('origin', severities.get('severity_origin'))
         if 'severity_type' in severities:
@@ -546,10 +555,22 @@ def get_params_vt_as_xml_str(vt_id, vt_params):
             vt_param.set('type', prefs['type'])
             vt_param.set('id', _pref_id)
             xml_name = SubElement(vt_param, 'name')
-            xml_name.text = prefs['name']
+            try:
+                xml_name.text = prefs['name']
+            except ValueError as e:
+                logger.warning(
+                    "Not possible to parse parameter for vt %s: %s", vt_id, e
+                )
             if prefs['default']:
                 xml_def = SubElement(vt_param, 'default')
-                xml_def.text = prefs['default']
+                try:
+                    xml_def.text = prefs['default']
+                except ValueError as e:
+                    logger.warning(
+                        "Not possible to parse default parameter for vt %s: %s",
+                        vt_id,
+                        e,
+                    )
             vt_params_xml.append(vt_param)
 
         return tostring(vt_params_xml).decode('utf-8')
@@ -626,7 +647,12 @@ def get_creation_time_vt_as_xml_str(
             string: xml element as string.
         """
         _time = Element('creation_time')
-        _time.text = creation_time
+        try:
+            _time.text = creation_time
+        except ValueError as e:
+            logger.warning(
+                "Not possible to parse creation time for vt %s: %s", vt_id, e
+            )
         return tostring(_time).decode('utf-8')
 
     @staticmethod
@@ -641,7 +667,14 @@ def get_modification_time_vt_as_xml_str(
             string: xml element as string.
         """
         _time = Element('modification_time')
-        _time.text = modification_time
+        try:
+            _time.text = modification_time
+        except ValueError as e:
+            logger.warning(
+                "Not possible to parse modification time for vt %s: %s",
+                vt_id,
+                e,
+            )
         return tostring(_time).decode('utf-8')
 
     @staticmethod
@@ -654,7 +687,12 @@ def get_summary_vt_as_xml_str(vt_id, summary):
             string: xml element as string.
         """
         _summary = Element('summary')
-        _summary.text = summary
+        try:
+            _summary.text = summary
+        except ValueError as e:
+            logger.warning(
+                "Not possible to parse summary tag for vt %s: %s", vt_id, e
+            )
         return tostring(_summary).decode('utf-8')
 
     @staticmethod
@@ -668,7 +706,12 @@ def get_impact_vt_as_xml_str(vt_id, impact):
             string: xml element as string.
         """
         _impact = Element('impact')
-        _impact.text = impact
+        try:
+            _impact.text = impact
+        except ValueError as e:
+            logger.warning(
+                "Not possible to parse impact tag for vt %s: %s", vt_id, e
+            )
         return tostring(_impact).decode('utf-8')
 
     @staticmethod
@@ -681,7 +724,12 @@ def get_affected_vt_as_xml_str(vt_id, affected):
             string: xml element as string.
         """
         _affected = Element('affected')
-        _affected.text = affected
+        try:
+            _affected.text = affected
+        except ValueError as e:
+            logger.warning(
+                "Not possible to parse affected tag for vt %s: %s", vt_id, e
+            )
         return tostring(_affected).decode('utf-8')
 
     @staticmethod
@@ -694,7 +742,12 @@ def get_insight_vt_as_xml_str(vt_id, insight):
             string: xml element as string.
         """
         _insight = Element('insight')
-        _insight.text = insight
+        try:
+            _insight.text = insight
+        except ValueError as e:
+            logger.warning(
+                "Not possible to parse insight tag for vt %s: %s", vt_id, e
+            )
         return tostring(_insight).decode('utf-8')
 
     @staticmethod
@@ -708,7 +761,12 @@ def get_solution_vt_as_xml_str(vt_id, solution, solution_type=None):
             string: xml element as string.
         """
         _solution = Element('solution')
-        _solution.text = solution
+        try:
+            _solution.text = solution
+        except ValueError as e:
+            logger.warning(
+                "Not possible to parse solution tag for vt %s: %s", vt_id, e
+            )
         if solution_type:
             _solution.set('type', solution_type)
         return tostring(_solution).decode('utf-8')
@@ -729,7 +787,14 @@ def get_detection_vt_as_xml_str(
         """
         _detection = Element('detection')
         if vuldetect:
-            _detection.text = vuldetect
+            try:
+                _detection.text = vuldetect
+            except ValueError as e:
+                logger.warning(
+                    "Not possible to parse detection tag for vt %s: %s",
+                    vt_id,
+                    e,
+                )
         if qod_type:
             _detection.set('qod_type', qod_type)
         elif qod:
@@ -1017,11 +1082,9 @@ def stop_scan_cleanup(
                 self.openvas_db.release_db(current_kbi)
                 for host_kb in range(0, self.openvas_db.max_dbindex):
                     self.openvas_db.select_kb(
-                        ctx,
-                        str(host_kb),
-                        set_global=True)
-                    if self.openvas_db.get_single_item(
-                            'internal/%s' % scan_id):
+                        ctx, str(host_kb), set_global=True
+                    )
+                    if self.openvas_db.get_single_item('internal/%s' % scan_id):
                         self.openvas_db.release_db(host_kb)
 
     def get_vts_in_groups(self, filters):
@@ -1100,8 +1163,7 @@ def process_vts(self, vts):
         for vtid, vt_params in vts.items():
             if vtid not in self.vts.keys():
                 logger.warning(
-                    'The vt %s was not found and it will not be loaded.',
-                    vtid,
+                    'The vt %s was not found and it will not be loaded.', vtid
                 )
                 continue
             vts_list.append(vtid)
@@ -1294,9 +1356,7 @@ def exec_scan(self, scan_id, target):
         self.openvas_db.add_single_item(
             'internal/%s/globalscanid' % scan_id, [openvas_scan_id]
         )
-        self.openvas_db.add_single_item(
-            'internal/scanid', [openvas_scan_id]
-        )
+        self.openvas_db.add_single_item('internal/scanid', [openvas_scan_id])
 
         exclude_hosts = self.get_scan_exclude_hosts(scan_id, target)
         if exclude_hosts:

From 84ae1f6c8ef01d34da86de8e322e5e8be7f21496 Mon Sep 17 00:00:00 2001
From: Juan Jose Nicola <juan.nicola@greenbone.net>
Date: Fri, 1 Nov 2019 10:47:35 +0100
Subject: [PATCH 2/4] Improve tests

---
 ospd_openvas/daemon.py |   2 +-
 tests/test_daemon.py   | 154 +++++++++++++++++++++++++++++++++++++----
 2 files changed, 140 insertions(+), 16 deletions(-)

diff --git a/ospd_openvas/daemon.py b/ospd_openvas/daemon.py
index 1231499..f9d55c3 100644
--- a/ospd_openvas/daemon.py
+++ b/ospd_openvas/daemon.py
@@ -626,7 +626,7 @@ def get_dependencies_vt_as_xml_str(
             _vt_dep = Element('dependency')
             try:
                 _vt_dep.set('vt_id', dep)
-            except TypeError:
+            except (ValueError, TypeError):
                 logger.error(
                     'Not possible to add dependency %s for vt %s', dep, vt_id
                 )
diff --git a/tests/test_daemon.py b/tests/test_daemon.py
index de15c28..af08a3c 100644
--- a/tests/test_daemon.py
+++ b/tests/test_daemon.py
@@ -23,8 +23,9 @@
 
 import unittest
 import io
+import logging
 
-from unittest.mock import patch, mock_open
+from unittest.mock import patch, mock_open, Mock
 
 from tests.dummydaemon import DummyDaemon
 
@@ -230,6 +231,16 @@ def test_get_custom_xml(self, mock_nvti, mock_db):
         )
         self.assertEqual(len(res), len(out))
 
+    def test_get_custom_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        custom = {'a': u"\u0006"}
+        logging.Logger.warning = Mock()
+        res = w.get_custom_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', custom=custom
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_get_severities_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = (
@@ -244,6 +255,16 @@ def test_get_severities_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_severities_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        sever = {'severity_base_vector': u"\u0006"}
+        logging.Logger.warning = Mock()
+        res = w.get_severities_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', severities=sever
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_get_params_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = (
@@ -259,6 +280,22 @@ def test_get_params_xml(self, mock_nvti, mock_db):
         res = w.get_params_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', params)
         self.assertEqual(len(res), len(out))
 
+    def test_get_params_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        params = {
+            '1': {
+                'id': '1',
+                'type': 'entry',
+                'default': u'\u0006',
+                'name': 'dns-fuzz.timelimit',
+                'description': 'Description',
+            }
+        }
+        logging.Logger.warning = Mock()
+        res = w.get_params_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', params)
+        logging.Logger.warning.assert_called_once()
+
     def test_get_refs_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = '<refs><ref type="url" id="http://www.mantisbt.org/"/>' '</refs>'
@@ -281,11 +318,19 @@ def test_get_dependencies_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
-    def test_get_ctime_xml(self, mock_nvti, mock_db):
+    def test_get_dependencies_xml_failed(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
-        out = (
-            '<creation_time>1237458156</creation_time>'
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        dep = [u"\u0006"]
+        logging.Logger.error = Mock()
+        res = w.get_dependencies_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', dep_list=dep
         )
+        logging.Logger.error.assert_called_once()
+
+    def test_get_ctime_xml(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        out = '<creation_time>1237458156</creation_time>'
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         ctime = vt.get('creation_time')
         res = w.get_creation_time_vt_as_xml_str(
@@ -294,11 +339,19 @@ def test_get_ctime_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
-    def test_get_mtime_xml(self, mock_nvti, mock_db):
+    def test_get_ctime_xml_failed(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
-        out = (
-            '<modification_time>1533906565</modification_time>'
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        ctime = u'\u0006'
+        logging.Logger.warning = Mock()
+        res = w.get_creation_time_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', creation_time=ctime
         )
+        logging.Logger.warning.assert_called_once()
+
+    def test_get_mtime_xml(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        out = '<modification_time>1533906565</modification_time>'
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         mtime = vt.get('modification_time')
         res = w.get_modification_time_vt_as_xml_str(
@@ -307,6 +360,16 @@ def test_get_mtime_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_mtime_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        mtime = u'\u0006'
+        logging.Logger.warning = Mock()
+        res = w.get_modification_time_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', mtime
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_get_summary_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = '<summary>some summary</summary>'
@@ -318,6 +381,16 @@ def test_get_summary_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_summary_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        summary = u'\u0006'
+        logging.Logger.warning = Mock()
+        res = w.get_summary_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', summary
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_get_impact_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = '<impact>some impact</impact>'
@@ -327,6 +400,14 @@ def test_get_impact_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_impact_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        impact = u'\u0006'
+        logging.Logger.warning = Mock()
+        res = w.get_impact_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', impact)
+        logging.Logger.warning.assert_called_once()
+
     def test_get_insight_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = '<insight>some insight</insight>'
@@ -338,6 +419,16 @@ def test_get_insight_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_insight_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        insight = u'\u0006'
+        logging.Logger.warning = Mock()
+        res = w.get_insight_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', insight
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_get_solution_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = '<solution type="WillNotFix">some solution</solution>'
@@ -351,6 +442,16 @@ def test_get_solution_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_solution_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        solution = u'\u0006'
+        logging.Logger.warning = Mock()
+        res = w.get_solution_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', solution
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_get_detection_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = '<detection qod_type="remote_banner"/>'
@@ -363,6 +464,16 @@ def test_get_detection_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_detection_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        detection = u'\u0006'
+        logging.Logger.warning = Mock()
+        res = w.get_detection_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', detection
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_get_affected_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
         out = '<affected>some affection</affected>'
@@ -375,6 +486,17 @@ def test_get_affected_xml(self, mock_nvti, mock_db):
 
         self.assertEqual(res, out)
 
+    def test_get_affected_xml_failed(self, mock_nvti, mock_db):
+        w = DummyDaemon(mock_nvti, mock_db)
+        out = '<affected>some affection</affected>'
+        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
+        affected = u"\u0006" + "affected"
+        logging.Logger.warning = Mock()
+        res = w.get_affected_vt_as_xml_str(
+            '1.3.6.1.4.1.25623.1.0.100061', affected=affected
+        )
+        logging.Logger.warning.assert_called_once()
+
     def test_build_credentials(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
 
@@ -474,16 +596,16 @@ def test_process_vts_bad_param_id(self, mock_nvti, mock_db):
         ret = w.process_vts(vts)
         self.assertFalse(ret[1])
 
-    @patch('logging.Logger.warning')
-    def test_process_vts_not_found(self, mock_logger, mock_nvti, mock_db):
+    def test_process_vts_not_found(self, mock_nvti, mock_db):
         vts = {
             '1.3.6.1.4.1.25623.1.0.100065': {'3': 'new value'},
             'vt_groups': ['family=debian', 'family=general'],
         }
         w = DummyDaemon(mock_nvti, mock_db)
         w.load_vts()
+        logging.Logger.warning = Mock()
         ret = w.process_vts(vts)
-        self.assertTrue(mock_logger.called)
+        logging.Logger.warning.assert_called_once()
 
     def test_get_openvas_timestamp_scan_host_end(self, mock_nvti, mock_db):
         mock_db.get_host_scan_scan_end_time.return_value = '12345'
@@ -534,8 +656,9 @@ def test_feed_is_outdated_true(self, mock_nvti, mock_db):
         with patch.object(w, 'parse_param', return_value=None):
             with patch.object(Path, 'exists', return_value=True):
                 read_data = 'PLUGIN_SET = "1235";'
-                with patch("builtins.open",
-                    return_value=io.StringIO(read_data)):
+                with patch(
+                    "builtins.open", return_value=io.StringIO(read_data)
+                ):
                     # Return True
                     w.scan_only_params['plugins_folder'] = '/foo/bar'
                     ret = w.feed_is_outdated('1234')
@@ -547,9 +670,10 @@ def test_feed_is_outdated_false(self, mock_nvti, mock_db):
         with patch.object(w, 'parse_param', return_value=None):
             read_data = 'PLUGIN_SET = "1234";'
             with patch.object(Path, 'exists', return_value=True):
-                read_data = 'PLUGIN_SET = "1234"';
-                with patch("builtins.open",
-                    return_value=io.StringIO(read_data)):
+                read_data = 'PLUGIN_SET = "1234"'
+                with patch(
+                    "builtins.open", return_value=io.StringIO(read_data)
+                ):
                     # Return True
                     w.scan_only_params['plugins_folder'] = '/foo/bar'
                     ret = w.feed_is_outdated('1234')

From c2db203b63452e3c788e4f144387454837b152ec Mon Sep 17 00:00:00 2001
From: Juan Jose Nicola <juan.nicola@greenbone.net>
Date: Fri, 1 Nov 2019 11:14:36 +0100
Subject: [PATCH 3/4] Only test with assert_called_once() for python >=3.6

---
 tests/test_daemon.py | 39 ++++++++++++++++++++++++++-------------
 1 file changed, 26 insertions(+), 13 deletions(-)

diff --git a/tests/test_daemon.py b/tests/test_daemon.py
index af08a3c..6ad0fd7 100644
--- a/tests/test_daemon.py
+++ b/tests/test_daemon.py
@@ -239,7 +239,8 @@ def test_get_custom_xml_failed(self, mock_nvti, mock_db):
         res = w.get_custom_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', custom=custom
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_severities_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -263,7 +264,8 @@ def test_get_severities_xml_failed(self, mock_nvti, mock_db):
         res = w.get_severities_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', severities=sever
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_params_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -294,7 +296,8 @@ def test_get_params_xml_failed(self, mock_nvti, mock_db):
         }
         logging.Logger.warning = Mock()
         res = w.get_params_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', params)
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_refs_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -326,7 +329,8 @@ def test_get_dependencies_xml_failed(self, mock_nvti, mock_db):
         res = w.get_dependencies_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', dep_list=dep
         )
-        logging.Logger.error.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.error.assert_called_once()
 
     def test_get_ctime_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -347,7 +351,8 @@ def test_get_ctime_xml_failed(self, mock_nvti, mock_db):
         res = w.get_creation_time_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', creation_time=ctime
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_onc'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_mtime_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -368,7 +373,8 @@ def test_get_mtime_xml_failed(self, mock_nvti, mock_db):
         res = w.get_modification_time_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', mtime
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_summary_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -389,7 +395,8 @@ def test_get_summary_xml_failed(self, mock_nvti, mock_db):
         res = w.get_summary_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', summary
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_calledonce'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_impact_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -406,7 +413,8 @@ def test_get_impact_xml_failed(self, mock_nvti, mock_db):
         impact = u'\u0006'
         logging.Logger.warning = Mock()
         res = w.get_impact_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', impact)
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_insight_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -427,7 +435,8 @@ def test_get_insight_xml_failed(self, mock_nvti, mock_db):
         res = w.get_insight_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', insight
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_solution_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -450,7 +459,8 @@ def test_get_solution_xml_failed(self, mock_nvti, mock_db):
         res = w.get_solution_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', solution
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_detection_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -472,7 +482,8 @@ def test_get_detection_xml_failed(self, mock_nvti, mock_db):
         res = w.get_detection_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', detection
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_affected_xml(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -495,7 +506,8 @@ def test_get_affected_xml_failed(self, mock_nvti, mock_db):
         res = w.get_affected_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', affected=affected
         )
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_build_credentials(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
@@ -605,7 +617,8 @@ def test_process_vts_not_found(self, mock_nvti, mock_db):
         w.load_vts()
         logging.Logger.warning = Mock()
         ret = w.process_vts(vts)
-        logging.Logger.warning.assert_called_once()
+        if hasattr(Mock, 'assert_called_once'):
+            logging.Logger.warning.assert_called_once()
 
     def test_get_openvas_timestamp_scan_host_end(self, mock_nvti, mock_db):
         mock_db.get_host_scan_scan_end_time.return_value = '12345'

From 41019ed9ee363d357c178ab2d1cd2c58c907abe4 Mon Sep 17 00:00:00 2001
From: Juan Jose Nicola <juan.nicola@greenbone.net>
Date: Fri, 1 Nov 2019 11:24:17 +0100
Subject: [PATCH 4/4] Fix imported modules and remove unused variables from
 tests.

---
 tests/test_daemon.py | 47 +++++++++++++++++---------------------------
 1 file changed, 18 insertions(+), 29 deletions(-)

diff --git a/tests/test_daemon.py b/tests/test_daemon.py
index 6ad0fd7..9448aa2 100644
--- a/tests/test_daemon.py
+++ b/tests/test_daemon.py
@@ -21,12 +21,13 @@
 
 """ Unit Test for ospd-openvas """
 
-import unittest
+from unittest import TestCase
+from unittest.mock import patch
+from unittest.mock import Mock
+
 import io
 import logging
 
-from unittest.mock import patch, mock_open, Mock
-
 from tests.dummydaemon import DummyDaemon
 
 from ospd_openvas.daemon import OSPD_PARAMS, OpenVasVtsFilter, Path
@@ -179,7 +180,7 @@
 
 @patch('ospd_openvas.db.OpenvasDB')
 @patch('ospd_openvas.nvticache.NVTICache')
-class TestOspdOpenvas(unittest.TestCase):
+class TestOspdOpenvas(TestCase):
     @patch('ospd_openvas.daemon.subprocess')
     def test_redis_nvticache_init(self, mock_subproc, mock_nvti, mock_db):
         mock_subproc.check_call.return_value = True
@@ -233,10 +234,9 @@ def test_get_custom_xml(self, mock_nvti, mock_db):
 
     def test_get_custom_xml_failed(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
-        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         custom = {'a': u"\u0006"}
         logging.Logger.warning = Mock()
-        res = w.get_custom_vt_as_xml_str(
+        w.get_custom_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', custom=custom
         )
         if hasattr(Mock, 'assert_called_once'):
@@ -261,7 +261,7 @@ def test_get_severities_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         sever = {'severity_base_vector': u"\u0006"}
         logging.Logger.warning = Mock()
-        res = w.get_severities_vt_as_xml_str(
+        w.get_severities_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', severities=sever
         )
         if hasattr(Mock, 'assert_called_once'):
@@ -295,7 +295,7 @@ def test_get_params_xml_failed(self, mock_nvti, mock_db):
             }
         }
         logging.Logger.warning = Mock()
-        res = w.get_params_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', params)
+        w.get_params_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', params)
         if hasattr(Mock, 'assert_called_once'):
             logging.Logger.warning.assert_called_once()
 
@@ -326,7 +326,7 @@ def test_get_dependencies_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         dep = [u"\u0006"]
         logging.Logger.error = Mock()
-        res = w.get_dependencies_vt_as_xml_str(
+        w.get_dependencies_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', dep_list=dep
         )
         if hasattr(Mock, 'assert_called_once'):
@@ -348,7 +348,7 @@ def test_get_ctime_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         ctime = u'\u0006'
         logging.Logger.warning = Mock()
-        res = w.get_creation_time_vt_as_xml_str(
+        w.get_creation_time_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', creation_time=ctime
         )
         if hasattr(Mock, 'assert_called_onc'):
@@ -370,7 +370,7 @@ def test_get_mtime_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         mtime = u'\u0006'
         logging.Logger.warning = Mock()
-        res = w.get_modification_time_vt_as_xml_str(
+        w.get_modification_time_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', mtime
         )
         if hasattr(Mock, 'assert_called_once'):
@@ -392,9 +392,7 @@ def test_get_summary_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         summary = u'\u0006'
         logging.Logger.warning = Mock()
-        res = w.get_summary_vt_as_xml_str(
-            '1.3.6.1.4.1.25623.1.0.100061', summary
-        )
+        w.get_summary_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', summary)
         if hasattr(Mock, 'assert_calledonce'):
             logging.Logger.warning.assert_called_once()
 
@@ -412,7 +410,7 @@ def test_get_impact_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         impact = u'\u0006'
         logging.Logger.warning = Mock()
-        res = w.get_impact_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', impact)
+        w.get_impact_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', impact)
         if hasattr(Mock, 'assert_called_once'):
             logging.Logger.warning.assert_called_once()
 
@@ -432,9 +430,7 @@ def test_get_insight_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         insight = u'\u0006'
         logging.Logger.warning = Mock()
-        res = w.get_insight_vt_as_xml_str(
-            '1.3.6.1.4.1.25623.1.0.100061', insight
-        )
+        w.get_insight_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', insight)
         if hasattr(Mock, 'assert_called_once'):
             logging.Logger.warning.assert_called_once()
 
@@ -456,9 +452,7 @@ def test_get_solution_xml_failed(self, mock_nvti, mock_db):
         vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         solution = u'\u0006'
         logging.Logger.warning = Mock()
-        res = w.get_solution_vt_as_xml_str(
-            '1.3.6.1.4.1.25623.1.0.100061', solution
-        )
+        w.get_solution_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', solution)
         if hasattr(Mock, 'assert_called_once'):
             logging.Logger.warning.assert_called_once()
 
@@ -476,12 +470,9 @@ def test_get_detection_xml(self, mock_nvti, mock_db):
 
     def test_get_detection_xml_failed(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
-        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         detection = u'\u0006'
         logging.Logger.warning = Mock()
-        res = w.get_detection_vt_as_xml_str(
-            '1.3.6.1.4.1.25623.1.0.100061', detection
-        )
+        w.get_detection_vt_as_xml_str('1.3.6.1.4.1.25623.1.0.100061', detection)
         if hasattr(Mock, 'assert_called_once'):
             logging.Logger.warning.assert_called_once()
 
@@ -499,11 +490,9 @@ def test_get_affected_xml(self, mock_nvti, mock_db):
 
     def test_get_affected_xml_failed(self, mock_nvti, mock_db):
         w = DummyDaemon(mock_nvti, mock_db)
-        out = '<affected>some affection</affected>'
-        vt = w.VT['1.3.6.1.4.1.25623.1.0.100061']
         affected = u"\u0006" + "affected"
         logging.Logger.warning = Mock()
-        res = w.get_affected_vt_as_xml_str(
+        w.get_affected_vt_as_xml_str(
             '1.3.6.1.4.1.25623.1.0.100061', affected=affected
         )
         if hasattr(Mock, 'assert_called_once'):
@@ -723,7 +712,7 @@ def test_update_progress(self, mock_ospd, mock_nvti, mock_db):
         mock_ospd.assert_called_with('123-456', 'localhost', 'localhost', 100)
 
 
-class TestFilters(unittest.TestCase):
+class TestFilters(TestCase):
     def test_format_vt_modification_time(self):
         ovformat = OpenVasVtsFilter()
         td = '1517443741'
